// <auto-generated />
using System;
using Assignment_Management.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Assignment_Management.Migrations
{
    [DbContext(typeof(Assignment_ManagementContext))]
    partial class Assignment_ManagementContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Assignment_Management.Models.Assignment_Images", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Image_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AssignID")
                        .HasColumnType("int")
                        .HasColumnName("Img_AssignID");

                    b.Property<int>("AssignmentsId")
                        .HasColumnType("int");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Img_FilePath");

                    b.HasKey("ID");

                    b.HasIndex("AssignmentsId");

                    b.ToTable("Assignment_Images");
                });

            modelBuilder.Entity("Assignment_Management.Models.Assignments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Assignment_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AssignedOn")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("Assigned_on");

                    b.Property<int>("Assignment_No")
                        .HasColumnType("int");

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Deadline")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Assignment_Descrip");

                    b.Property<int>("ProfID")
                        .HasColumnType("int")
                        .HasColumnName("Assigned_by_prof");

                    b.Property<int>("ProfessorID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Assignment_Title");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("Assignment_Type");

                    b.HasKey("Id");

                    b.HasIndex("CourseID");

                    b.HasIndex("ProfessorID");

                    b.ToTable("Assignment_master");
                });

            modelBuilder.Entity("Assignment_Management.Models.Course", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Course_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Course_link");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Course_Name");

                    b.Property<int>("Semester")
                        .HasColumnType("int")
                        .HasColumnName("Course_Semester");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Course_Status");

                    b.HasKey("ID");

                    b.ToTable("Course_Master");
                });

            modelBuilder.Entity("Assignment_Management.Models.Course_Professors", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CourseProf_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CourseID")
                        .HasColumnType("int")
                        .HasColumnName("Prof_CourseID");

                    b.Property<int>("ProfID")
                        .HasColumnType("int")
                        .HasColumnName("Course_Prof");

                    b.Property<int>("ProfessorID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CourseID");

                    b.HasIndex("ProfessorID");

                    b.ToTable("Course_Professors");
                });

            modelBuilder.Entity("Assignment_Management.Models.Course_Students", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Course_Enrolled_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CourseID")
                        .HasColumnType("int")
                        .HasColumnName("Enrolled_CourseID");

                    b.Property<long>("StudentPRN")
                        .HasColumnType("bigint")
                        .HasColumnName("Enrolled_PRN");

                    b.HasKey("ID");

                    b.HasIndex("CourseID");

                    b.HasIndex("StudentPRN");

                    b.ToTable("Course_Students");
                });

            modelBuilder.Entity("Assignment_Management.Models.Professor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Prof_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Prof_FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Prof_LastName");

                    b.Property<string>("MailID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Prof_Email");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Prof_MiddleName");

                    b.Property<string>("hash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Prof_hash");

                    b.Property<string>("salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Prof_salt");

                    b.HasKey("ID");

                    b.ToTable("Professor_Master");
                });

            modelBuilder.Entity("Assignment_Management.Models.Student", b =>
                {
                    b.Property<long>("PRN")
                        .HasColumnType("bigint")
                        .HasColumnName("Student_PRN");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Student_FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Student_LastName");

                    b.Property<string>("MailID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Student_EMail");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Student_MiddleName");

                    b.Property<string>("hash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Student_hash");

                    b.Property<string>("salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Student_salt");

                    b.HasKey("PRN");

                    b.ToTable("Student_Master");
                });

            modelBuilder.Entity("Assignment_Management.Models.Submissions", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AssignID")
                        .HasColumnType("int")
                        .HasColumnName("Assign_ID");

                    b.Property<int>("AssignmentsId")
                        .HasColumnType("int");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Submission_FilePath");

                    b.Property<long>("StudentPRN")
                        .HasColumnType("bigint");

                    b.Property<long>("SubmittedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("Student_PRN");

                    b.Property<DateTime?>("SubmittedDate")
                        .IsRequired()
                        .HasColumnType("datetime2")
                        .HasColumnName("Submitted_on");

                    b.HasKey("ID");

                    b.HasIndex("AssignmentsId");

                    b.HasIndex("StudentPRN");

                    b.ToTable("Submissions");
                });

            modelBuilder.Entity("Assignment_Management.Models.Assignment_Images", b =>
                {
                    b.HasOne("Assignment_Management.Models.Assignments", "Assignments")
                        .WithMany("Images")
                        .HasForeignKey("AssignmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("Assignment_Management.Models.Assignments", b =>
                {
                    b.HasOne("Assignment_Management.Models.Course", "Course")
                        .WithMany("CourseAssignments")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment_Management.Models.Professor", "Professor")
                        .WithMany("Assignments")
                        .HasForeignKey("ProfessorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Professor");
                });

            modelBuilder.Entity("Assignment_Management.Models.Course_Professors", b =>
                {
                    b.HasOne("Assignment_Management.Models.Course", "Course")
                        .WithMany("CourseProfessors")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment_Management.Models.Professor", "Professor")
                        .WithMany("Course_Professors")
                        .HasForeignKey("ProfessorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Professor");
                });

            modelBuilder.Entity("Assignment_Management.Models.Course_Students", b =>
                {
                    b.HasOne("Assignment_Management.Models.Course", "Course")
                        .WithMany("CourseStudents")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment_Management.Models.Student", "Student")
                        .WithMany("Course_Students")
                        .HasForeignKey("StudentPRN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Assignment_Management.Models.Submissions", b =>
                {
                    b.HasOne("Assignment_Management.Models.Assignments", "Assignments")
                        .WithMany()
                        .HasForeignKey("AssignmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment_Management.Models.Student", "Student")
                        .WithMany("Submissions")
                        .HasForeignKey("StudentPRN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignments");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Assignment_Management.Models.Assignments", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("Assignment_Management.Models.Course", b =>
                {
                    b.Navigation("CourseAssignments");

                    b.Navigation("CourseProfessors");

                    b.Navigation("CourseStudents");
                });

            modelBuilder.Entity("Assignment_Management.Models.Professor", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Course_Professors");
                });

            modelBuilder.Entity("Assignment_Management.Models.Student", b =>
                {
                    b.Navigation("Course_Students");

                    b.Navigation("Submissions");
                });
#pragma warning restore 612, 618
        }
    }
}
